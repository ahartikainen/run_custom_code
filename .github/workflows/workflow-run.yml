name: ModelRuns

on:
    push:
      branches:
        - '**'

jobs:
  models:
    name: models
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
          os: [ubuntu-latest, macos-latest]
          python-version: [3.8]
      fail-fast: false
    steps:
      - name: Checkout github
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v1
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install python dependencies (pip)
        run: |
          pip install --upgrade pip wheel
          pip install httpstan
          pip install --pre pystan

      - name: Inject prints (macOS)
        run: |
            brew install gnu-sed

            python -c "import stan;print(stan)"
            python -c "import httpstan;print(httpstan)"

            find /Users/runner/hostedtoolcache/Python -type f -wholename "*/httpstan/services_stub.py" 2>/dev/null | xargs gsed -i 's/potential_readers, \[], \[], 0.01/potential_readers, [], [], 0.4// w /dev/stdout'
            find /Users/runner/hostedtoolcache/Python -type f -wholename "*/stan/model.py" 2>/dev/null | xargs gsed -i 's/                msg.ParseFromString/                try:\n                    msg.ParseFromString/ w /dev/stdout'
            find /Users/runner/hostedtoolcache/Python -type f -wholename "*/stan/model.py" 2>/dev/null | xargs gsed -i 's/                yield msg/                except:\n                    import platform\n                    with open(f"exception_file_{platform.system()}.bin", mode="wb") as f, open(f"exception_location_{platform.system()}.txt", "w") as f2:\n                        f.write(fit_bytes)\n                        print(pos, next_pos, file=f2)\n                        print(pos, next_pos, "\\n\\n", fit_bytes[pos : pos + next_pos], "\\n\\n", flush=True)\n                    raise\n                yield msg/ w /dev/stdout'
        if: matrix.os == 'macos-latest'

      - name: Inject prints (Linux)
        run: |
          python -c "import stan;print(stan)"
          python -c "import httpstan;print(httpstan)"

          find /opt/hostedtoolcache/Python -type f -wholename "*/httpstan/services_stub.py" 2>/dev/null | xargs sed -i 's/potential_readers, \[], \[], 0.01/potential_readers, [], [], 0.1// w /dev/stdout'
          find /opt/hostedtoolcache/Python -type f -wholename "*/stan/model.py" 2>/dev/null | xargs sed -i 's/                msg.ParseFromString/                try:\n                    msg.ParseFromString/ w /dev/stdout'
          find /opt/hostedtoolcache/Python -type f -wholename "*/stan/model.py" 2>/dev/null | xargs sed -i 's/                yield msg/                except:\n                    import platform\n                    with open(f"exception_file_{platform.system()}.bin", mode="wb") as f, open(f"exception_location_{platform.system()}.txt", "w") as f2:\n                        f.write(fit_bytes)\n                        print(pos, next_pos, file=f2)\n                        print(pos, next_pos, "\\n\\n", fit_bytes[pos : pos + next_pos], "\\n\\n", flush=True)\n                    \n                yield msg/ w /dev/stdout'
        if: matrix.os == 'ubuntu-latest'

      - name: Check versions
        run: |
          python -c 'import httpstan;print("HTTPStan version: {}".format(httpstan.__version__))'
          python -c 'import stan;print("PyStan version: {}".format(stan.__version__))'

      - name: Run models
        run: |
          python scripts/run_models.py

      - uses: actions/upload-artifact@v2
        with:
          name: exception_results_bin
          path: ./*.bin

      - uses: actions/upload-artifact@v2
        with:
          name: exception_results_txt
          path: ./*.txt
